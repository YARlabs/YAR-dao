{
  "address": "0x4f3ebdDdF68f130c3d2Ebcbb603C807256d860Bb",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "NewAcceptVote",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "NewRejectVote",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "accepted",
          "type": "bool"
        }
      ],
      "name": "VotingFinished",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "accept",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "acceptedAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "daoContract",
      "outputs": [
        {
          "internalType": "contract Dao",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "_daoContract",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_nodeHash",
          "type": "bytes32"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isAccepted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isOver",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nodeHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reject",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rejectedAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xe5fdbd7a2b588aafa975351701d2ac1acba41319af4a4a6a1049b37138f7d94e",
  "receipt": {
    "to": null,
    "from": "0x3A939F2956265AA31B04591647f4484B13F0f941",
    "contractAddress": "0x4f3ebdDdF68f130c3d2Ebcbb603C807256d860Bb",
    "transactionIndex": 0,
    "gasUsed": "541885",
    "logsBloom": "0x
    "blockHash": "0x223e2c53469c5488aaa9da38cf24dbf316f6398248f8a65e84880680c6da823c",
    "transactionHash": "0xe5fdbd7a2b588aafa975351701d2ac1acba41319af4a4a6a1049b37138f7d94e",
    "logs": [],
    "blockNumber": 127024,
    "cumulativeGasUsed": "541885",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "fbaf5d819f9bea87ebe47be23d5d3272",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"NewAcceptVote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"NewRejectVote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"accepted\",\"type\":\"bool\"}],\"name\":\"VotingFinished\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"accept\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daoContract\",\"outputs\":[{\"internalType\":\"contract Dao\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_daoContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_nodeHash\",\"type\":\"bytes32\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isAccepted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nodeHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reject\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rejectedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/votings_factory/votings/UnblockNodeVoting.sol\":\"UnblockNodeVoting\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x1d4afe6cb24200cc4545eed814ecf5847277dfe5d613a1707aad5fceecebcfff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/ERC1967/ERC1967Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Proxy.sol\\\";\\nimport \\\"./ERC1967Upgrade.sol\\\";\\n\\n/**\\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\\n * implementation address that can be changed. This address is stored in storage in the location specified by\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\\n * implementation behind the proxy.\\n */\\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\\n    /**\\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\\n     *\\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\\n     * function call, and allows initializing the storage of the proxy like a Solidity constructor.\\n     */\\n    constructor(address _logic, bytes memory _data) payable {\\n        _upgradeToAndCall(_logic, _data, false);\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _implementation() internal view virtual override returns (address impl) {\\n        return ERC1967Upgrade._getImplementation();\\n    }\\n}\\n\",\"keccak256\":\"0xa2b22da3032e50b55f95ec1d13336102d675f341167aa76db571ef7f8bb7975d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967Upgrade {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xabf3f59bc0e5423eae45e459dbe92e7052c6983628d39008590edc852a62f94a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overridden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {}\\n}\\n\",\"keccak256\":\"0xc130fe33f1b2132158531a87734153293f6d07bc263ff4ac90e85da9c82c0e27\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x190dd6f8d592b7e4e930feb7f4313aeb8e1c4ad3154c27ce1cf6a512fc30d8cc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b72f93be69ca894d8492c244259615c4a742afc8d63720dbc8bb81087d9b238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"},\"contracts/dao/Dao.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\n\\r\\nimport { VotingsFactory } from \\\"../votings_factory/VotingsFactory.sol\\\";\\r\\nimport { IDaoClosureState } from \\\"./IDaoClosureState.sol\\\";\\r\\nimport { ConstantsLibrary } from \\\"../libraries/ConstantsLibrary.sol\\\";\\r\\nimport { AcceptTextAction } from \\\"./actions/AcceptTextAction.sol\\\";\\r\\nimport { SetCertifiedConnectorAction } from \\\"./actions/SetCertifiedConnectorAction.sol\\\";\\r\\nimport { SetFeeAction } from \\\"./actions/SetFeeAction.sol\\\";\\r\\nimport { SetValidatorBlockRewardsAction } from \\\"./actions/SetValidatorBlockRewardsAction.sol\\\";\\r\\nimport { SetPercentageOfVotesToConfirmAction } from \\\"./actions/SetPercentageOfVotesToConfirmAction.sol\\\";\\r\\nimport { SetValidatorStakeAmountAction } from \\\"./actions/SetValidatorStakeAmountAction.sol\\\";\\r\\nimport { SetValidatorStakeTimeoutAction } from \\\"./actions/SetValidatorStakeTimeoutAction.sol\\\";\\r\\nimport { SetVotingTimeoutAction } from \\\"./actions/SetVotingTimeoutAction.sol\\\";\\r\\nimport { UnblockNodeAction } from \\\"./actions/UnblockNodeAction.sol\\\";\\r\\nimport { WithdrawAction } from \\\"./actions/WithdrawAction.sol\\\";\\r\\nimport { WithdrawERC20Action } from \\\"./actions/WithdrawERC20Action.sol\\\";\\r\\n\\r\\ncontract Dao is\\r\\n    IDaoClosureState,\\r\\n    AcceptTextAction,\\r\\n    SetCertifiedConnectorAction,\\r\\n    SetFeeAction,\\r\\n    SetValidatorBlockRewardsAction,\\r\\n    SetPercentageOfVotesToConfirmAction,\\r\\n    SetValidatorStakeAmountAction,\\r\\n    SetValidatorStakeTimeoutAction,\\r\\n    SetVotingTimeoutAction,\\r\\n    UnblockNodeAction,\\r\\n    WithdrawAction,\\r\\n    WithdrawERC20Action\\r\\n{\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    mapping(address => bool) public votingUsers;\\r\\n    uint256 public votingUsersCount;\\r\\n\\r\\n    constructor(\\r\\n        address _votingsFactory,\\r\\n        address[] memory _votingUsers,\\r\\n        uint256 _fee,\\r\\n        uint256 _percentageOfVotesToConfirm,\\r\\n        uint256 _validatorBlockRewards,\\r\\n        uint256 _validatorStakeAmount,\\r\\n        uint256 _validatorStakeTimeout,\\r\\n        uint256 _votingTimeout\\r\\n    ) {\\r\\n        uint256 l = _votingUsers.length;\\r\\n        for (uint256 i; i < l; i++) {\\r\\n            votingUsers[_votingUsers[i]] = true;\\r\\n        }\\r\\n        votingUsersCount = l;\\r\\n\\r\\n        votingsFactory = VotingsFactory(_votingsFactory);\\r\\n        votingsFactory.init(payable(address(this)));\\r\\n\\r\\n        fee = _fee;\\r\\n        percentageOfVotesToConfirm = _percentageOfVotesToConfirm;\\r\\n        validatorBlockRewards = _validatorBlockRewards;\\r\\n        validatorStakeAmount = _validatorStakeAmount;\\r\\n        validatorStakeTimeout = _validatorStakeTimeout;\\r\\n        votingTimeout = _votingTimeout;\\r\\n    }\\r\\n\\r\\n    function enforceIsVotingUser(address _user) public view {\\r\\n        require(votingUsers[_user], \\\"Dao: only voting user\\\");\\r\\n    }\\r\\n\\r\\n    function enforceIsVotingNotExpired(uint256 _initTimestamp) public view {\\r\\n        require(block.timestamp < _initTimestamp + votingTimeout, \\\"Dao: voting expired!\\\");\\r\\n    }\\r\\n\\r\\n    function isVotingAccepted(uint256 _acceptedAmount) external view returns (bool) {\\r\\n        return\\r\\n            (_acceptedAmount * ConstantsLibrary.MAX_PERCENTAGE) / votingUsersCount >=\\r\\n            percentageOfVotesToConfirm;\\r\\n    }\\r\\n\\r\\n    function isVotingRejected(uint256 _rejectedAmount) external view returns (bool) {\\r\\n        return\\r\\n            (_rejectedAmount * ConstantsLibrary.MAX_PERCENTAGE) / votingUsersCount >=\\r\\n            ConstantsLibrary.MAX_PERCENTAGE - percentageOfVotesToConfirm;\\r\\n    }\\r\\n\\r\\n    // Only test, remove on production\\r\\n    function setVotingUser(address _user, bool _value) external {\\r\\n        votingUsers[_user] = _value;\\r\\n        if (_value) {\\r\\n            votingUsersCount += 1;\\r\\n        } else {\\r\\n            votingUsersCount -= 1;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xc3d15b4b32cc2d066bf3e786844fd93f02668402e5cfdce77e79fa913e1c1897\",\"license\":\"UNLICENSED\"},\"contracts/dao/IDaoClosureState.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport { ReentrancyGuard } from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport { VotingsFactory } from \\\"../votings_factory/VotingsFactory.sol\\\";\\r\\n\\r\\nabstract contract IDaoClosureState is ReentrancyGuard {\\r\\n    VotingsFactory public votingsFactory;\\r\\n}\\r\\n\\r\\n\",\"keccak256\":\"0x68e26189f678c97b9205eddf98dd919fb009344cb1d2e02b65731b294cc79709\",\"license\":\"UNLICENSED\"},\"contracts/dao/actions/AcceptTextAction.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport { IDaoClosureState } from \\\"../IDaoClosureState.sol\\\";\\r\\n\\r\\nabstract contract AcceptTextAction is IDaoClosureState {\\r\\n    mapping(bytes32 => bool) public acceptedTexts;\\r\\n\\r\\n    event NewAcceptedText(bytes32 textHash);\\r\\n\\r\\n    function acceptText(bytes32 _textHash) external {\\r\\n        votingsFactory.enforceIsVotingContract(msg.sender);\\r\\n\\r\\n        acceptedTexts[_textHash] = true;\\r\\n        emit NewAcceptedText({ textHash: _textHash });\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xb784907b78dfeada393dbbed1e8bb2b4a6cc94de34dc6638f859004786f95160\",\"license\":\"UNLICENSED\"},\"contracts/dao/actions/SetCertifiedConnectorAction.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport { IDaoClosureState } from \\\"../IDaoClosureState.sol\\\";\\r\\n\\r\\nabstract contract SetCertifiedConnectorAction is IDaoClosureState {\\r\\n    mapping(bytes32 => bool) public certifiedConnectors;\\r\\n    \\r\\n    event SetCertifiedConnector(bytes32 connectorHash, bool value);\\r\\n\\r\\n    function setCertifiedConnector(bytes32 _connectorHash, bool _value) external {\\r\\n        votingsFactory.enforceIsVotingContract(msg.sender);\\r\\n        certifiedConnectors[_connectorHash] = _value;\\r\\n        emit SetCertifiedConnector({ connectorHash: _connectorHash, value: _value });\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x88c7d50856e9d41ea340ab857dbd9c48a09d4349c5bbdac56cc1ef93c3432c63\",\"license\":\"UNLICENSED\"},\"contracts/dao/actions/SetFeeAction.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport { IDaoClosureState } from \\\"../IDaoClosureState.sol\\\";\\r\\n\\r\\nabstract contract SetFeeAction is IDaoClosureState {\\r\\n    uint256 public fee;\\r\\n    \\r\\n    event NewFees(uint256 newValue, uint256 prevValue);\\r\\n\\r\\n    function setFee(uint256 _newFee) external {\\r\\n        votingsFactory.enforceIsVotingContract(msg.sender);\\r\\n        emit NewFees({ newValue: _newFee, prevValue: fee });\\r\\n        fee = _newFee;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x33e7f5a79ac97c8722a070cc12e807809f6b0a3a33d0da6092615ff2816bba04\",\"license\":\"UNLICENSED\"},\"contracts/dao/actions/SetPercentageOfVotesToConfirmAction.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport { IDaoClosureState } from \\\"../IDaoClosureState.sol\\\";\\r\\n\\r\\nabstract contract SetPercentageOfVotesToConfirmAction is IDaoClosureState {\\r\\n    uint256 public percentageOfVotesToConfirm;\\r\\n    \\r\\n    event NewPercentageOfVotesToConfirm(uint256 newValue, uint256 prevValue);\\r\\n\\r\\n    function setPercentageOfVotesToConfirm(uint256 _newPercentageOfVotesToConfirm) external {\\r\\n        votingsFactory.enforceIsVotingContract(msg.sender);\\r\\n        emit NewPercentageOfVotesToConfirm({\\r\\n            newValue: _newPercentageOfVotesToConfirm,\\r\\n            prevValue: percentageOfVotesToConfirm\\r\\n        });\\r\\n        percentageOfVotesToConfirm = _newPercentageOfVotesToConfirm;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xbd91529df56e92047293306f0f5b0d9a51e8a8785c044f576958a1cf9f874970\",\"license\":\"UNLICENSED\"},\"contracts/dao/actions/SetValidatorBlockRewardsAction.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport { IDaoClosureState } from \\\"../IDaoClosureState.sol\\\";\\r\\n\\r\\nabstract contract SetValidatorBlockRewardsAction is IDaoClosureState {\\r\\n    uint256 public validatorBlockRewards;\\r\\n\\r\\n    event NewValidatorBlockRewards(uint256 newValue, uint256 prevValue);\\r\\n\\r\\n    function setValidatorBlockRewards(uint256 _newValidatorBlockRewards) external {\\r\\n        votingsFactory.enforceIsVotingContract(msg.sender);\\r\\n        emit NewValidatorBlockRewards({\\r\\n            newValue: _newValidatorBlockRewards,\\r\\n            prevValue: validatorBlockRewards\\r\\n        });\\r\\n        validatorBlockRewards = _newValidatorBlockRewards;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x3665de9f39589fed84c1da38b986fe8ef910441ee8d7eb5cb9277bb23046f843\",\"license\":\"UNLICENSED\"},\"contracts/dao/actions/SetValidatorStakeAmountAction.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport { IDaoClosureState } from \\\"../IDaoClosureState.sol\\\";\\r\\n\\r\\nabstract contract SetValidatorStakeAmountAction is IDaoClosureState {\\r\\n    uint256 public validatorStakeAmount;\\r\\n    \\r\\n    event NewValidatorStakeAmount(uint256 newValue, uint256 prevValue);\\r\\n\\r\\n    function setValidatorStakeAmount(uint256 _newValidatorStakeAmount) external {\\r\\n        votingsFactory.enforceIsVotingContract(msg.sender);\\r\\n        emit NewValidatorStakeAmount({\\r\\n            newValue: _newValidatorStakeAmount,\\r\\n            prevValue: validatorStakeAmount\\r\\n        });\\r\\n        validatorStakeAmount = _newValidatorStakeAmount;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xfea0a9bcf7b976dc55dc5fdeeb2dddf97e205cca87dfa62303a7163b7c415c29\",\"license\":\"UNLICENSED\"},\"contracts/dao/actions/SetValidatorStakeTimeoutAction.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport { IDaoClosureState } from \\\"../IDaoClosureState.sol\\\";\\r\\n\\r\\nabstract contract SetValidatorStakeTimeoutAction is IDaoClosureState {\\r\\n    uint256 public validatorStakeTimeout;\\r\\n    \\r\\n    event NewValidatorStakeTimeout(uint256 newValue, uint256 prevValue);\\r\\n\\r\\n    function setValidatorStakeTimeout(uint256 _newValidatorStakeTimeout) external {\\r\\n        votingsFactory.enforceIsVotingContract(msg.sender);\\r\\n        emit NewValidatorStakeTimeout({\\r\\n            newValue: _newValidatorStakeTimeout,\\r\\n            prevValue: validatorStakeTimeout\\r\\n        });\\r\\n        validatorStakeTimeout = _newValidatorStakeTimeout;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x68680367a2ec836f35444fd863ba75f157280acfd646f9a3f067c1effb7dffea\",\"license\":\"UNLICENSED\"},\"contracts/dao/actions/SetVotingTimeoutAction.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport { IDaoClosureState } from \\\"../IDaoClosureState.sol\\\";\\r\\n\\r\\nabstract contract SetVotingTimeoutAction is IDaoClosureState {\\r\\n    uint256 public votingTimeout;\\r\\n    \\r\\n    event NewVotingTimeout(uint256 newValue, uint256 prevValue);\\r\\n   \\r\\n    function setVotingTimeout(uint256 _newVotingTimeout) external {\\r\\n        votingsFactory.enforceIsVotingContract(msg.sender);\\r\\n        emit NewVotingTimeout({ newValue: _newVotingTimeout, prevValue: votingTimeout });\\r\\n        votingTimeout = _newVotingTimeout;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x902e7d612fb7f9919738a4875fade0428fbc06758e2653e6c25763fa0c19b9a3\",\"license\":\"UNLICENSED\"},\"contracts/dao/actions/UnblockNodeAction.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport { IDaoClosureState } from \\\"../IDaoClosureState.sol\\\";\\r\\n\\r\\nabstract contract UnblockNodeAction is IDaoClosureState {\\r\\n    mapping(bytes32 => bool) public blockedNodes;\\r\\n    \\r\\n    event NodeUnblocked(bytes32 nodeHash);\\r\\n\\r\\n    function unblockNode(bytes32 _nodeHash) external {\\r\\n        votingsFactory.enforceIsVotingContract(msg.sender);\\r\\n        delete blockedNodes[_nodeHash];\\r\\n        emit NodeUnblocked({\\r\\n            nodeHash: _nodeHash\\r\\n        });\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x01073d66276d9030d01f377c61ad5f59280906fc294265818cf2bfb83ae929dd\",\"license\":\"UNLICENSED\"},\"contracts/dao/actions/WithdrawAction.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport { IDaoClosureState } from \\\"../IDaoClosureState.sol\\\";\\r\\n\\r\\nabstract contract WithdrawAction is IDaoClosureState {\\r\\n    struct WithdrawRequest {\\r\\n        address recipient;\\r\\n        uint256 amount;\\r\\n    }\\r\\n\\r\\n    uint256 public firstWithdrawRequest;\\r\\n    uint256 public lastWithdrawRequest;\\r\\n    mapping(uint256 => WithdrawRequest) public withdrawRequests;\\r\\n\\r\\n    event NewWithdrawRequest(address indexed recipient, uint256 amount);\\r\\n    event Withdrawn(uint256 indexed requestId, address indexed recipient, uint256 amount);\\r\\n\\r\\n    receive() external payable {}\\r\\n\\r\\n    function hasWithdrawRequestInQueue() public view returns (bool) {\\r\\n        return firstWithdrawRequest < lastWithdrawRequest;\\r\\n    }\\r\\n\\r\\n    function addNewWithdrawRequest(address _recipient, uint256 _amount) external {\\r\\n        votingsFactory.enforceIsVotingContract(msg.sender);\\r\\n        withdrawRequests[lastWithdrawRequest++] = WithdrawRequest({\\r\\n            recipient: _recipient,\\r\\n            amount: _amount\\r\\n        });\\r\\n        emit NewWithdrawRequest({ recipient: _recipient, amount: _amount });\\r\\n    }\\r\\n\\r\\n    function withdrawFromQueue() external nonReentrant {\\r\\n        require(hasWithdrawRequestInQueue(), \\\"Dao: not has requests in queue\\\");\\r\\n\\r\\n        uint256 requestId = firstWithdrawRequest;\\r\\n        WithdrawRequest memory request = withdrawRequests[requestId];\\r\\n\\r\\n        if (address(this).balance >= request.amount) {\\r\\n            firstWithdrawRequest++;\\r\\n            (bool success, ) = payable(request.recipient).call{ value: request.amount }(\\\"\\\");\\r\\n            require(success, \\\"Dao: withdraw failure!\\\");\\r\\n            emit Withdrawn({\\r\\n                requestId: requestId,\\r\\n                recipient: request.recipient,\\r\\n                amount: request.amount\\r\\n            });\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xd2db066bbba044b641462c1dc723d65a145f98d563fdbb45af59093b62e4afb6\",\"license\":\"UNLICENSED\"},\"contracts/dao/actions/WithdrawERC20Action.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\n\\r\\nimport { IDaoClosureState } from \\\"../IDaoClosureState.sol\\\";\\r\\n\\r\\nabstract contract WithdrawERC20Action is IDaoClosureState {\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    struct WithdrawERC20Request {\\r\\n        address recipient;\\r\\n        address token;\\r\\n        uint256 amount;\\r\\n    }\\r\\n\\r\\n    mapping(address => uint256) public firstWithdrawERC20Request;\\r\\n    mapping(address => uint256) public lastWithdrawERC20Request;\\r\\n    mapping(address => mapping(uint256 => WithdrawERC20Request)) public withdrawERC20Requests;\\r\\n\\r\\n    event NewWithdrawERC20Request(address indexed recipient, address indexed token, uint256 amount);\\r\\n    event WithdrawnERC20(\\r\\n        uint256 indexed requestId,\\r\\n        address indexed recipient,\\r\\n        address indexed token,\\r\\n        uint256 amount\\r\\n    );\\r\\n\\r\\n    function addNewWithdrawERC20Request(\\r\\n        address _recipient,\\r\\n        address _token,\\r\\n        uint256 _amount\\r\\n    ) external {\\r\\n        votingsFactory.enforceIsVotingContract(msg.sender);\\r\\n        withdrawERC20Requests[_token][lastWithdrawERC20Request[_token]++] = WithdrawERC20Request({\\r\\n            recipient: _recipient,\\r\\n            token: _token,\\r\\n            amount: _amount\\r\\n        });\\r\\n        emit NewWithdrawERC20Request({ recipient: _recipient, token: _token, amount: _amount });\\r\\n    }\\r\\n\\r\\n    function withdrawERC20FromQueue(address _token) external nonReentrant {\\r\\n        uint256 requestId = firstWithdrawERC20Request[_token];\\r\\n\\r\\n        require(requestId < lastWithdrawERC20Request[_token], \\\"Dao: not has requests in queue\\\");\\r\\n\\r\\n        WithdrawERC20Request memory request = withdrawERC20Requests[_token][requestId];\\r\\n\\r\\n        IERC20 token = IERC20(_token);\\r\\n        \\r\\n        if (token.balanceOf(address(this)) >= request.amount) {\\r\\n            firstWithdrawERC20Request[_token]++;\\r\\n            token.safeTransfer(request.recipient, request.amount);\\r\\n            emit WithdrawnERC20({\\r\\n                requestId: requestId,\\r\\n                recipient: request.recipient,\\r\\n                token: _token,\\r\\n                amount: request.amount\\r\\n            });\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xff84728c793819376bca64730a019b71d2e6f3dd36feb9ef25106163fa8ac22c\",\"license\":\"UNLICENSED\"},\"contracts/libraries/ConstantsLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nlibrary ConstantsLibrary {\\r\\n    uint256 internal constant MAX_PERCENTAGE = 10000;\\r\\n}\\r\\n\\r\\n\",\"keccak256\":\"0x6a03ddc516cbce8c7941b4ed41d7c3c8a66a3f475a206475725f94833f08448b\",\"license\":\"UNLICENSED\"},\"contracts/votings_factory/VotingsFactory.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport { ERC1967Proxy } from \\\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\\\";\\r\\nimport { Initializable } from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\r\\n\\r\\nimport { WithdrawVoting } from \\\"./votings/WithdrawVoting.sol\\\";\\r\\nimport { WithdrawERC20Voting } from \\\"./votings/WithdrawERC20Voting.sol\\\";\\r\\nimport { FeeVoting } from \\\"./votings/FeeVoting.sol\\\";\\r\\nimport { PercentageOfVotesToConfirmVoting } from \\\"./votings/PercentageOfVotesToConfirmVoting.sol\\\";\\r\\nimport { VotingTimeoutVoting } from \\\"./votings/VotingTimeoutVoting.sol\\\";\\r\\nimport { ValidatorStakeAmountVoting } from \\\"./votings/ValidatorStakeAmountVoting.sol\\\";\\r\\nimport { ValidatorStakeTimeoutVoting } from \\\"./votings/ValidatorStakeTimeoutVoting.sol\\\";\\r\\nimport { CustomTextVoting } from \\\"./votings/CustomTextVoting.sol\\\";\\r\\nimport { CertifiedConnectorVoting } from \\\"./votings/CertifiedConnectorVoting.sol\\\";\\r\\nimport { UnblockNodeVoting } from \\\"./votings/UnblockNodeVoting.sol\\\";\\r\\nimport { ValidatorBlockRewardsVoting } from \\\"./votings/ValidatorBlockRewardsVoting.sol\\\";\\r\\nimport { Dao } from \\\"../dao/Dao.sol\\\";\\r\\n\\r\\ncontract VotingsFactory is Initializable {\\r\\n    mapping(address => bool) public votingsContracts;\\r\\n\\r\\n    address payable public daoContract;\\r\\n    address public withdrawVotingImplementation;\\r\\n    address public withdrawERC20VotingImplementation;\\r\\n    address public feesVotingImplementation;\\r\\n    address public validatorStakeAmountVotingImplementation;\\r\\n    address public validatorStakeTimeoutVotingImplementation;\\r\\n    address public percentageOfVotesToConfirmVotingImplementation;\\r\\n    address public votingTimeoutVotingImplementation;\\r\\n    address public customTextVotingImplementation;\\r\\n    address public certifiedConnectorVotingImplementation;\\r\\n    address public unblockNodeVotingImplementation;\\r\\n    address public validatorBlockRewardsVotingImplementation;\\r\\n\\r\\n    event NewWithdrawVoting(address contractAddress, address recipient, uint256 amount);\\r\\n    event NewWithdrawERC20Voting(\\r\\n        address contractAddress,\\r\\n        address recipient,\\r\\n        address token,\\r\\n        uint256 amount\\r\\n    );\\r\\n    event NewFeeVoting(address contractAddress, uint256 newFee);\\r\\n    event NewValidatorStakeAmountVoting(address contractAddress, uint256 newValidatorStakeAmount);\\r\\n    event NewValidatorStakeTimeoutVoting(address contractAddress, uint256 newValidatorStakeTimeout);\\r\\n    event NewPercentageOfVotesToConfirmVoting(\\r\\n        address contractAddress,\\r\\n        uint256 newPercentageOfVotesToConfirm\\r\\n    );\\r\\n    event NewVotingTimeoutVoting(address contractAddress, uint256 newVotingTimeout);\\r\\n    event NewCustomTextVoting(address contractAddress, bytes32 textHash);\\r\\n    event NewCertifiedConnectorVoting(address contractAddress, bytes32 connectorHash, bool value);\\r\\n    event NewUnblockNodeVoting(address contractAddress, bytes32 nodeHash);\\r\\n    event NewValidatorBlockRewardsVoting(address contractAddress, uint256 newValidatorBlockRewards);\\r\\n\\r\\n    constructor(\\r\\n        address _withdrawVotingImplementation,\\r\\n        address _withdrawERC20VotingImplementation,\\r\\n        address _feesVotingImplementation,\\r\\n        address _validatorStakeAmountVotingImplementation,\\r\\n        address _validatorStakeTimeoutVotingImplementation,\\r\\n        address _percentageOfVotesToConfirmVotingImplementation,\\r\\n        address _votingTimeoutVotingImplementation,\\r\\n        address _customTextVotingImplementation,\\r\\n        address _certifiedConnectorVotingImplementation,\\r\\n        address _unblockNodeVotingImplementation,\\r\\n        address _validatorBlockRewardsVotingImplementation\\r\\n    ) {\\r\\n        withdrawVotingImplementation = _withdrawVotingImplementation;\\r\\n        withdrawERC20VotingImplementation = _withdrawERC20VotingImplementation;\\r\\n        feesVotingImplementation = _feesVotingImplementation;\\r\\n        validatorStakeAmountVotingImplementation = _validatorStakeAmountVotingImplementation;\\r\\n        validatorStakeTimeoutVotingImplementation = _validatorStakeTimeoutVotingImplementation;\\r\\n        percentageOfVotesToConfirmVotingImplementation = _percentageOfVotesToConfirmVotingImplementation;\\r\\n        votingTimeoutVotingImplementation = _votingTimeoutVotingImplementation;\\r\\n        customTextVotingImplementation = _customTextVotingImplementation;\\r\\n        certifiedConnectorVotingImplementation = _certifiedConnectorVotingImplementation;\\r\\n        unblockNodeVotingImplementation = _unblockNodeVotingImplementation;\\r\\n        validatorBlockRewardsVotingImplementation = _validatorBlockRewardsVotingImplementation;\\r\\n    }\\r\\n\\r\\n    function init(address payable _daoContract) external initializer {\\r\\n        daoContract = _daoContract;\\r\\n    }\\r\\n\\r\\n    function enforceIsVotingContract(address _user) external view {\\r\\n        require(votingsContracts[_user], \\\"VotingsFactory: only votings contracts!\\\");\\r\\n    }\\r\\n\\r\\n    function createWithdrawVoting(address _recipient, uint256 _amount) external {\\r\\n        Dao(daoContract).enforceIsVotingUser(msg.sender);\\r\\n        address newWithdrawVoting = address(\\r\\n            new ERC1967Proxy(\\r\\n                withdrawVotingImplementation,\\r\\n                abi.encodeWithSelector(\\r\\n                    WithdrawVoting.initialize.selector,\\r\\n                    daoContract,\\r\\n                    _recipient,\\r\\n                    _amount\\r\\n                )\\r\\n            )\\r\\n        );\\r\\n        votingsContracts[newWithdrawVoting] = true;\\r\\n        emit NewWithdrawVoting({\\r\\n            contractAddress: newWithdrawVoting,\\r\\n            recipient: _recipient,\\r\\n            amount: _amount\\r\\n        });\\r\\n    }\\r\\n\\r\\n    function createWithdrawERC20Voting(\\r\\n        address _recipient,\\r\\n        address _token,\\r\\n        uint256 _amount\\r\\n    ) external {\\r\\n        Dao(daoContract).enforceIsVotingUser(msg.sender);\\r\\n        address newWithdrawERC20Voting = address(\\r\\n            new ERC1967Proxy(\\r\\n                withdrawERC20VotingImplementation,\\r\\n                abi.encodeWithSelector(\\r\\n                    WithdrawERC20Voting.initialize.selector,\\r\\n                    daoContract,\\r\\n                    _recipient,\\r\\n                    _token,\\r\\n                    _amount\\r\\n                )\\r\\n            )\\r\\n        );\\r\\n        votingsContracts[newWithdrawERC20Voting] = true;\\r\\n        emit NewWithdrawERC20Voting({\\r\\n            contractAddress: newWithdrawERC20Voting,\\r\\n            recipient: _recipient,\\r\\n            token: _token,\\r\\n            amount: _amount\\r\\n        });\\r\\n    }\\r\\n\\r\\n    function createFeeVoting(uint256 _newFee) external {\\r\\n        Dao(daoContract).enforceIsVotingUser(msg.sender);\\r\\n        address newFeeVoting = address(\\r\\n            new ERC1967Proxy(\\r\\n                feesVotingImplementation,\\r\\n                abi.encodeWithSelector(FeeVoting.initialize.selector, daoContract, _newFee)\\r\\n            )\\r\\n        );\\r\\n        votingsContracts[newFeeVoting] = true;\\r\\n        emit NewFeeVoting({ contractAddress: newFeeVoting, newFee: _newFee });\\r\\n    }\\r\\n\\r\\n    function createValidatorStakeAmountVoting(uint256 _newValidatorStakeAmount) external {\\r\\n        Dao(daoContract).enforceIsVotingUser(msg.sender);\\r\\n        address newValidatorStakeAmountVoting = address(\\r\\n            new ERC1967Proxy(\\r\\n                validatorStakeAmountVotingImplementation,\\r\\n                abi.encodeWithSelector(\\r\\n                    ValidatorStakeAmountVoting.initialize.selector,\\r\\n                    daoContract,\\r\\n                    _newValidatorStakeAmount\\r\\n                )\\r\\n            )\\r\\n        );\\r\\n        votingsContracts[newValidatorStakeAmountVoting] = true;\\r\\n        emit NewValidatorStakeAmountVoting({\\r\\n            contractAddress: newValidatorStakeAmountVoting,\\r\\n            newValidatorStakeAmount: _newValidatorStakeAmount\\r\\n        });\\r\\n    }\\r\\n\\r\\n    function createValidatorStakeTimeoutVoting(uint256 _newValidatorStakeTimeout) external {\\r\\n        Dao(daoContract).enforceIsVotingUser(msg.sender);\\r\\n        address newValidatorStakeTimeoutVoting = address(\\r\\n            new ERC1967Proxy(\\r\\n                validatorStakeTimeoutVotingImplementation,\\r\\n                abi.encodeWithSelector(\\r\\n                    ValidatorStakeTimeoutVoting.initialize.selector,\\r\\n                    daoContract,\\r\\n                    _newValidatorStakeTimeout\\r\\n                )\\r\\n            )\\r\\n        );\\r\\n        votingsContracts[newValidatorStakeTimeoutVoting] = true;\\r\\n        emit NewValidatorStakeTimeoutVoting({\\r\\n            contractAddress: newValidatorStakeTimeoutVoting,\\r\\n            newValidatorStakeTimeout: _newValidatorStakeTimeout\\r\\n        });\\r\\n    }\\r\\n\\r\\n    function createPercentageOfVotesToConfirmVoting(uint256 _newPercentageOfVotesToConfirm)\\r\\n        external\\r\\n    {\\r\\n        Dao(daoContract).enforceIsVotingUser(msg.sender);\\r\\n        address newPercentageOfVotesToConfirmVoting = address(\\r\\n            new ERC1967Proxy(\\r\\n                percentageOfVotesToConfirmVotingImplementation,\\r\\n                abi.encodeWithSelector(\\r\\n                    PercentageOfVotesToConfirmVoting.initialize.selector,\\r\\n                    daoContract,\\r\\n                    _newPercentageOfVotesToConfirm\\r\\n                )\\r\\n            )\\r\\n        );\\r\\n        votingsContracts[newPercentageOfVotesToConfirmVoting] = true;\\r\\n        emit NewPercentageOfVotesToConfirmVoting({\\r\\n            contractAddress: newPercentageOfVotesToConfirmVoting,\\r\\n            newPercentageOfVotesToConfirm: _newPercentageOfVotesToConfirm\\r\\n        });\\r\\n    }\\r\\n\\r\\n    function createVotingTimeoutVoting(uint256 _newVotingTimeout) external {\\r\\n        Dao(daoContract).enforceIsVotingUser(msg.sender);\\r\\n        address newVotingTimeoutVoting = address(\\r\\n            new ERC1967Proxy(\\r\\n                votingTimeoutVotingImplementation,\\r\\n                abi.encodeWithSelector(\\r\\n                    VotingTimeoutVoting.initialize.selector,\\r\\n                    daoContract,\\r\\n                    _newVotingTimeout\\r\\n                )\\r\\n            )\\r\\n        );\\r\\n        votingsContracts[newVotingTimeoutVoting] = true;\\r\\n        emit NewVotingTimeoutVoting({\\r\\n            contractAddress: newVotingTimeoutVoting,\\r\\n            newVotingTimeout: _newVotingTimeout\\r\\n        });\\r\\n    }\\r\\n\\r\\n    function createCustomTextVoting(bytes32 _textHash) external {\\r\\n        Dao(daoContract).enforceIsVotingUser(msg.sender);\\r\\n        address newCustomTextVoting = address(\\r\\n            new ERC1967Proxy(\\r\\n                customTextVotingImplementation,\\r\\n                abi.encodeWithSelector(CustomTextVoting.initialize.selector, daoContract, _textHash)\\r\\n            )\\r\\n        );\\r\\n        votingsContracts[newCustomTextVoting] = true;\\r\\n        emit NewCustomTextVoting({ contractAddress: newCustomTextVoting, textHash: _textHash });\\r\\n    }\\r\\n\\r\\n    function createCertifiedConnectorVoting(bytes32 _connectorHash, bool _value) external {\\r\\n        Dao(daoContract).enforceIsVotingUser(msg.sender);\\r\\n        address newCertifiedConnectorVoting = address(\\r\\n            new ERC1967Proxy(\\r\\n                certifiedConnectorVotingImplementation,\\r\\n                abi.encodeWithSelector(\\r\\n                    CertifiedConnectorVoting.initialize.selector,\\r\\n                    daoContract,\\r\\n                    _connectorHash,\\r\\n                    _value\\r\\n                )\\r\\n            )\\r\\n        );\\r\\n        votingsContracts[newCertifiedConnectorVoting] = true;\\r\\n        emit NewCertifiedConnectorVoting({\\r\\n            contractAddress: newCertifiedConnectorVoting,\\r\\n            connectorHash: _connectorHash,\\r\\n            value: _value\\r\\n        });\\r\\n    }\\r\\n\\r\\n    function createUnblockNodeVoting(bytes32 _nodeHash) external {\\r\\n        Dao dao = Dao(daoContract);\\r\\n        dao.enforceIsVotingUser(msg.sender);\\r\\n        require(dao.blockedNodes(_nodeHash), \\\"VotingsFactory: node not blocked\\\");\\r\\n        address newUnblockNodeVoting = address(\\r\\n            new ERC1967Proxy(\\r\\n                unblockNodeVotingImplementation,\\r\\n                abi.encodeWithSelector(\\r\\n                    UnblockNodeVoting.initialize.selector,\\r\\n                    daoContract,\\r\\n                    _nodeHash\\r\\n                )\\r\\n            )\\r\\n        );\\r\\n        votingsContracts[newUnblockNodeVoting] = true;\\r\\n        emit NewUnblockNodeVoting({ contractAddress: newUnblockNodeVoting, nodeHash: _nodeHash });\\r\\n    }\\r\\n\\r\\n    function createValidatorBlockRewardsVoting(uint256 _newValidatorBlockRewards) external {\\r\\n        Dao(daoContract).enforceIsVotingUser(msg.sender);\\r\\n        address newValidatorBlockRewardsVoting = address(\\r\\n            new ERC1967Proxy(\\r\\n                validatorBlockRewardsVotingImplementation,\\r\\n                abi.encodeWithSelector(\\r\\n                    ValidatorBlockRewardsVoting.initialize.selector,\\r\\n                    daoContract,\\r\\n                    _newValidatorBlockRewards\\r\\n                )\\r\\n            )\\r\\n        );\\r\\n        votingsContracts[newValidatorBlockRewardsVoting] = true;\\r\\n        emit NewValidatorBlockRewardsVoting({\\r\\n            contractAddress: newValidatorBlockRewardsVoting,\\r\\n            newValidatorBlockRewards: _newValidatorBlockRewards\\r\\n        });\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xc18e9c473a56e05ce19d02bf97163d2e72b2245c1be7aee2c85edb00c4bc5f88\",\"license\":\"UNLICENSED\"},\"contracts/votings_factory/votings/BaseVoting.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport { Initializable } from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\r\\n\\r\\nimport { Dao } from \\\"../../dao/Dao.sol\\\";\\r\\n\\r\\nabstract contract BaseVoting is Initializable {\\r\\n    uint256 public initTimestamp;\\r\\n    Dao public daoContract;\\r\\n    bool public isOver;\\r\\n    bool public isAccepted;\\r\\n    uint256 public acceptedAmount;\\r\\n    uint256 public rejectedAmount;\\r\\n    mapping(address => bool) votedUsers;\\r\\n\\r\\n    event NewAcceptVote(address indexed user);\\r\\n    event NewRejectVote(address indexed user);\\r\\n    event VotingFinished(bool accepted);\\r\\n\\r\\n    modifier votingNotOver() {\\r\\n        require(!isOver, \\\"Voting: is over!\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier notVotedUser() {\\r\\n        require(!votedUsers[msg.sender], \\\"Voting: already vote!\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function baseVotingInitialize(address payable _daoContract) internal initializer {\\r\\n        initTimestamp = block.timestamp;\\r\\n        daoContract = Dao(_daoContract);\\r\\n    }\\r\\n\\r\\n    function accept() external votingNotOver notVotedUser {\\r\\n        votedUsers[msg.sender] = true;\\r\\n\\r\\n        Dao dao = daoContract;\\r\\n        dao.enforceIsVotingNotExpired(initTimestamp);\\r\\n        dao.enforceIsVotingUser(msg.sender);\\r\\n    \\r\\n        acceptedAmount++;\\r\\n        emit NewAcceptVote({ user: msg.sender });\\r\\n\\r\\n        if (dao.isVotingAccepted(acceptedAmount)) {\\r\\n            isOver = true;\\r\\n            isAccepted = true;\\r\\n            execute();\\r\\n\\r\\n            emit VotingFinished({ accepted: true });\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function reject() external votingNotOver notVotedUser {\\r\\n        votedUsers[msg.sender] = true;\\r\\n\\r\\n        Dao dao = daoContract;\\r\\n        dao.enforceIsVotingNotExpired(initTimestamp);\\r\\n        dao.enforceIsVotingUser(msg.sender);\\r\\n\\r\\n        rejectedAmount++;\\r\\n        emit NewRejectVote({ user: msg.sender });\\r\\n\\r\\n        if (dao.isVotingRejected(rejectedAmount)) {\\r\\n            isOver = true;\\r\\n            isAccepted = false;\\r\\n            emit VotingFinished({ accepted: false });\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function execute() internal virtual;\\r\\n}\\r\\n\",\"keccak256\":\"0xce57e1c37ad1455921c290f9b078385913bb9e0d71d52be8565e43c046b82f8f\",\"license\":\"UNLICENSED\"},\"contracts/votings_factory/votings/CertifiedConnectorVoting.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport { BaseVoting } from \\\"./BaseVoting.sol\\\";\\r\\n\\r\\ncontract CertifiedConnectorVoting is BaseVoting {\\r\\n    bytes32 public connectorHash;\\r\\n    bool public value;\\r\\n\\r\\n    function initialize(address payable _daoContract, bytes32 _connectorHash, bool _value) external initializer {\\r\\n        baseVotingInitialize(_daoContract);\\r\\n        connectorHash = _connectorHash;\\r\\n        value = _value;\\r\\n    }\\r\\n\\r\\n    function execute() internal override {\\r\\n        daoContract.setCertifiedConnector(connectorHash, value);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x24d868b5706e331dcdfd76c4223231762de01b70fea863ba9604958ece36900a\",\"license\":\"UNLICENSED\"},\"contracts/votings_factory/votings/CustomTextVoting.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport { BaseVoting } from \\\"./BaseVoting.sol\\\";\\r\\n\\r\\ncontract CustomTextVoting is BaseVoting {\\r\\n    bytes32 public textHash;\\r\\n    uint256 public amount;\\r\\n\\r\\n    function initialize(address payable _daoContract, bytes32 _textHash) external initializer {\\r\\n        baseVotingInitialize(_daoContract);\\r\\n        textHash = _textHash;\\r\\n    }\\r\\n\\r\\n    function execute() internal override {\\r\\n        daoContract.acceptText(textHash);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x291d27dd8ece54fe2090f14c020aa1da87ef8dfed56039a6f0ab53c73c223963\",\"license\":\"UNLICENSED\"},\"contracts/votings_factory/votings/FeeVoting.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport { BaseVoting } from \\\"./BaseVoting.sol\\\";\\r\\n\\r\\ncontract FeeVoting is BaseVoting {\\r\\n    uint256 public newFee;\\r\\n\\r\\n    function initialize(address payable _daoContract, uint256 _newFee) external initializer {\\r\\n        baseVotingInitialize(_daoContract);\\r\\n        newFee = _newFee;\\r\\n    }\\r\\n\\r\\n    function execute() internal override {\\r\\n        daoContract.setFee(newFee);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x442878e12fe89150f06d51ddbe7a807de00b4b462706854e16baeae0c2988170\",\"license\":\"UNLICENSED\"},\"contracts/votings_factory/votings/PercentageOfVotesToConfirmVoting.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport { BaseVoting } from \\\"./BaseVoting.sol\\\";\\r\\nimport { ConstantsLibrary } from \\\"../../libraries/ConstantsLibrary.sol\\\";\\r\\n\\r\\ncontract PercentageOfVotesToConfirmVoting is BaseVoting {\\r\\n    uint256 public newPercentageOfVotesToConfirm;\\r\\n\\r\\n    function initialize(address payable _daoContract, uint256 _newPercentageOfVotesToConfirm) external initializer {\\r\\n        baseVotingInitialize(_daoContract);\\r\\n        require(_newPercentageOfVotesToConfirm <= ConstantsLibrary.MAX_PERCENTAGE, \\\"FeesVoting: new fees > 100%\\\");\\r\\n        newPercentageOfVotesToConfirm = _newPercentageOfVotesToConfirm;\\r\\n    }\\r\\n\\r\\n    function execute() internal override {\\r\\n        daoContract.setPercentageOfVotesToConfirm(newPercentageOfVotesToConfirm);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x94277642a7f7c17acf82149bad45ba780d8866a832d999d435058b9a3574ad0b\",\"license\":\"UNLICENSED\"},\"contracts/votings_factory/votings/UnblockNodeVoting.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport { BaseVoting } from \\\"./BaseVoting.sol\\\";\\r\\n\\r\\ncontract UnblockNodeVoting is BaseVoting {\\r\\n    bytes32 public nodeHash;\\r\\n\\r\\n    function initialize(address payable _daoContract, bytes32 _nodeHash) external initializer {\\r\\n        baseVotingInitialize(_daoContract);\\r\\n        nodeHash = _nodeHash;\\r\\n    }\\r\\n\\r\\n    function execute() internal override {\\r\\n        daoContract.unblockNode(nodeHash);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x7500e703b3224dc09dfd4ac5da5311c19252e045be214356c24e60a3abc1ccb2\",\"license\":\"UNLICENSED\"},\"contracts/votings_factory/votings/ValidatorBlockRewardsVoting.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport { BaseVoting } from \\\"./BaseVoting.sol\\\";\\r\\n\\r\\ncontract ValidatorBlockRewardsVoting is BaseVoting {\\r\\n    uint256 public newValidatorBlockRewards;\\r\\n\\r\\n    function initialize(address payable _daoContract, uint256 _newValidatorBlockRewards) external initializer {\\r\\n        baseVotingInitialize(_daoContract);\\r\\n        newValidatorBlockRewards = _newValidatorBlockRewards;\\r\\n    }\\r\\n\\r\\n    function execute() internal override {\\r\\n        daoContract.setValidatorBlockRewards(newValidatorBlockRewards);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x1df389f1e902ee57f962a8b907d02819d5ac9ea6ba4fa8a792e70246266c7580\",\"license\":\"UNLICENSED\"},\"contracts/votings_factory/votings/ValidatorStakeAmountVoting.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport { BaseVoting } from \\\"./BaseVoting.sol\\\";\\r\\n\\r\\ncontract ValidatorStakeAmountVoting is BaseVoting {\\r\\n    uint256 public newValidatorStakeAmount;\\r\\n\\r\\n    function initialize(address payable _daoContract, uint256 _newValidatorStakeAmount) external initializer {\\r\\n        baseVotingInitialize(_daoContract);\\r\\n        newValidatorStakeAmount = _newValidatorStakeAmount;\\r\\n    }\\r\\n\\r\\n    function execute() internal override {\\r\\n        daoContract.setValidatorStakeAmount(newValidatorStakeAmount);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x7d7d5aeb5510ccf65278b7bb0002b2f7cad8873ec34e0098c2b7bc3777b18a45\",\"license\":\"UNLICENSED\"},\"contracts/votings_factory/votings/ValidatorStakeTimeoutVoting.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport { BaseVoting } from \\\"./BaseVoting.sol\\\";\\r\\n\\r\\ncontract ValidatorStakeTimeoutVoting is BaseVoting {\\r\\n    uint256 public newValidatorStakeTimeout;\\r\\n\\r\\n    function initialize(address payable _daoContract, uint256 _newValidatorStakeTimeout) external initializer {\\r\\n        baseVotingInitialize(_daoContract);\\r\\n        newValidatorStakeTimeout = _newValidatorStakeTimeout;\\r\\n    }\\r\\n\\r\\n    function execute() internal override {\\r\\n        daoContract.setValidatorStakeTimeout(newValidatorStakeTimeout);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x2e8d3f114a8ce2325fb3e9a307ee5227d1c22ffd11e57e62bdacbbfc47feabc3\",\"license\":\"UNLICENSED\"},\"contracts/votings_factory/votings/VotingTimeoutVoting.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport { BaseVoting } from \\\"./BaseVoting.sol\\\";\\r\\n\\r\\ncontract VotingTimeoutVoting is BaseVoting {\\r\\n    uint256 public newVotingTimeout;\\r\\n\\r\\n    function initialize(address payable _daoContract, uint256 _newVotingTimeout) external initializer {\\r\\n        baseVotingInitialize(_daoContract);\\r\\n        newVotingTimeout = _newVotingTimeout;\\r\\n    }\\r\\n\\r\\n    function execute() internal override {\\r\\n        daoContract.setVotingTimeout(newVotingTimeout);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xf0c278be06b41af1ba02f9443f12fc4f1f8a2b05d2b2144d7cb37af86ebfb2c7\",\"license\":\"UNLICENSED\"},\"contracts/votings_factory/votings/WithdrawERC20Voting.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport { BaseVoting } from \\\"./BaseVoting.sol\\\";\\r\\n\\r\\ncontract WithdrawERC20Voting is BaseVoting {\\r\\n    address public recipient;\\r\\n    address public token;\\r\\n    uint256 public amount;\\r\\n\\r\\n    function initialize(address payable _daoContract, address _recipient, address _token, uint256 _amount) external initializer {\\r\\n        baseVotingInitialize(_daoContract);\\r\\n        require(_amount > 0, \\\"WithdrawERC20Voting: amount = 0\\\");\\r\\n        recipient = _recipient;\\r\\n        token = _token;\\r\\n        amount = _amount;\\r\\n    }\\r\\n\\r\\n    function execute() internal override {\\r\\n        address _token = token;\\r\\n        daoContract.addNewWithdrawERC20Request(recipient, _token, amount);\\r\\n        daoContract.withdrawERC20FromQueue(_token);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x48adc7d79c37c73657a118f092fce8b78af7d6488aaf8d88bffbe5c24aa039c6\",\"license\":\"UNLICENSED\"},\"contracts/votings_factory/votings/WithdrawVoting.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport { BaseVoting } from \\\"./BaseVoting.sol\\\";\\r\\n\\r\\ncontract WithdrawVoting is BaseVoting {\\r\\n    address public recipient;\\r\\n    uint256 public amount;\\r\\n\\r\\n    function initialize(address payable _daoContract, address _recipient, uint256 _amount) external initializer {\\r\\n        baseVotingInitialize(_daoContract);\\r\\n        require(_amount > 0, \\\"WithdrawVoting: amount = 0\\\");\\r\\n        recipient = _recipient;\\r\\n        amount = _amount;\\r\\n    }\\r\\n\\r\\n    function execute() internal override {\\r\\n        daoContract.addNewWithdrawRequest(recipient, amount);\\r\\n        daoContract.withdrawFromQueue();\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x5cf4d869e09c554d435d8d9e75696d8d48e7bc09eac10fbd89ce0968faabfd27\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x60808060405234610016576108d5908161001c8239f35b600080fdfe608060408181526004918236101561001657600080fd5b600092833560e01c918263184c21af1461071057508163281ad7eb146106f15781632852b71c146104cd5781634a7ffcbc146104a45781634dc415de146102c65781635051a5ec1461029f5781637358c57a14610280578163b4bd9e2714610259578163be13f47c146100b4575063f6e9efd41461009357600080fd5b346100b057816003193601126100b0576020906006549051908152f35b5080fd5b905034610255578160031936011261025557356001600160a01b03811691908290036102555782549160ff808460081c161591828093610249575b8015610233575b6100ff9061083c565b60ff19808616600190811788559584610222575b5086549086848360081c16159161013a8380978895610215575b81156101f4575b5061083c565b83161788556101e3575b504285556bffffffffffffffffffffffff60a01b60025416176002556101ac575b602435600655610173578280f35b825461ff0019168355519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890602090a138808280f35b61ff001984541684557f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249860208351858152a1610165565b61ffff191661010117865538610144565b905083303b159182610209575b505038610134565b87161490508338610201565b905083818716109061012d565b61ffff191661010117875538610113565b50303b1580156100f657508482166001146100f6565b506001828616106100ef565b8280fd5b5050346100b057816003193601126100b05760209060ff60025460a01c1690519015158152f35b5050346100b057816003193601126100b0576020906001549051908152f35b5050346100b057816003193601126100b05760209060ff60025460a81c1690519015158152f35b919050346102555782600319360112610255576102eb60ff60025460a01c161561072b565b3383526020906005825261030560ff82862054161561076a565b33845260058252808420600160ff198254161790556002549260018060a01b0384169085600154833b156100b05784519063017d30f760e71b8252838201528181602481875afa801561048657610490575b5050813b156104825782516360435d7760e01b8152338282015286908181602481875afa8015610486579086939291610469575b5050602461039982546107fa565b9182815585519485938492337fa43ab1d993dddc74c1625ebc4d49cb80c3360cb09a75783e3de34c17fd3418f58d80a2630824dda560e21b84528301525afa90811561045f578591610432575b506103ef578380f35b61ffff60a01b19909216600160a01b1760025590518281527fa645a33a6706739d95d9785acab71f06d2b89c02d601ef8c380e6fe4ee5223b99190a13880808380f35b6104529150833d8511610458575b61044a81836107d8565b81019061081f565b386103e6565b503d610440565b82513d87823e3d90fd5b610475919293506107ae565b610482578390863861038b565b8580fd5b85513d84823e3d90fd5b610499906107ae565b610482578538610357565b5050346100b057816003193601126100b05760025490516001600160a01b039091168152602090f35b9050346102555782600319360112610255576104f160ff60025460a01c161561072b565b3383526020906005825261050b60ff84862054161561076a565b33845260058252828420805460ff1916600190811790915560025490546001600160a01b038216929190833b156106ed5785519063017d30f760e71b8252838201528681602481875afa80156106e3576106cc575b5090829186933b1561068d5785516360435d7760e01b815233838201528481602481875afa9081156106ae5785916106b8575b50506105a06003546107fa565b80600355865190337f197fc30908874e1934e54d3c15ac16d9bdb26afab8eb3fdde47f777278d18ba38780a2634a988b7f60e01b8252838201528581602481875afa9081156106ae578591610691575b506105f9578380f35b61ffff60a01b191661010160a01b17600255600654823b1561068d5760248492838851958694859363194a60c360e11b85528401525af180156106835761066f575b50507fa645a33a6706739d95d9785acab71f06d2b89c02d601ef8c380e6fe4ee5223b9915160018152a13880828180808380f35b610678906107ae565b61025557823861063b565b84513d84823e3d90fd5b8380fd5b6106a89150863d88116104585761044a81836107d8565b386105f0565b87513d87823e3d90fd5b6106c1906107ae565b61068d578338610593565b6106da9096919392966107ae565b94909138610560565b86513d89823e3d90fd5b8680fd5b5050346100b057816003193601126100b0576020906003549051908152f35b84913461025557826003193601126102555760209250548152f35b1561073257565b60405162461bcd60e51b815260206004820152601060248201526f566f74696e673a206973206f7665722160801b6044820152606490fd5b1561077157565b60405162461bcd60e51b8152602060048201526015602482015274566f74696e673a20616c726561647920766f74652160581b6044820152606490fd5b67ffffffffffffffff81116107c257604052565b634e487b7160e01b600052604160045260246000fd5b90601f8019910116810190811067ffffffffffffffff8211176107c257604052565b60001981146108095760010190565b634e487b7160e01b600052601160045260246000fd5b90816020910312610837575180151581036108375790565b600080fd5b1561084357565b60405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608490fdfea264697066735822122080727f0eb5b953425c0802994a6458851a6b1ed0c3f47296a82182521f4d5c9364736f6c63430008110033",
  "deployedBytecode": "0x608060408181526004918236101561001657600080fd5b600092833560e01c918263184c21af1461071057508163281ad7eb146106f15781632852b71c146104cd5781634a7ffcbc146104a45781634dc415de146102c65781635051a5ec1461029f5781637358c57a14610280578163b4bd9e2714610259578163be13f47c146100b4575063f6e9efd41461009357600080fd5b346100b057816003193601126100b0576020906006549051908152f35b5080fd5b905034610255578160031936011261025557356001600160a01b03811691908290036102555782549160ff808460081c161591828093610249575b8015610233575b6100ff9061083c565b60ff19808616600190811788559584610222575b5086549086848360081c16159161013a8380978895610215575b81156101f4575b5061083c565b83161788556101e3575b504285556bffffffffffffffffffffffff60a01b60025416176002556101ac575b602435600655610173578280f35b825461ff0019168355519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890602090a138808280f35b61ff001984541684557f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249860208351858152a1610165565b61ffff191661010117865538610144565b905083303b159182610209575b505038610134565b87161490508338610201565b905083818716109061012d565b61ffff191661010117875538610113565b50303b1580156100f657508482166001146100f6565b506001828616106100ef565b8280fd5b5050346100b057816003193601126100b05760209060ff60025460a01c1690519015158152f35b5050346100b057816003193601126100b0576020906001549051908152f35b5050346100b057816003193601126100b05760209060ff60025460a81c1690519015158152f35b919050346102555782600319360112610255576102eb60ff60025460a01c161561072b565b3383526020906005825261030560ff82862054161561076a565b33845260058252808420600160ff198254161790556002549260018060a01b0384169085600154833b156100b05784519063017d30f760e71b8252838201528181602481875afa801561048657610490575b5050813b156104825782516360435d7760e01b8152338282015286908181602481875afa8015610486579086939291610469575b5050602461039982546107fa565b9182815585519485938492337fa43ab1d993dddc74c1625ebc4d49cb80c3360cb09a75783e3de34c17fd3418f58d80a2630824dda560e21b84528301525afa90811561045f578591610432575b506103ef578380f35b61ffff60a01b19909216600160a01b1760025590518281527fa645a33a6706739d95d9785acab71f06d2b89c02d601ef8c380e6fe4ee5223b99190a13880808380f35b6104529150833d8511610458575b61044a81836107d8565b81019061081f565b386103e6565b503d610440565b82513d87823e3d90fd5b610475919293506107ae565b610482578390863861038b565b8580fd5b85513d84823e3d90fd5b610499906107ae565b610482578538610357565b5050346100b057816003193601126100b05760025490516001600160a01b039091168152602090f35b9050346102555782600319360112610255576104f160ff60025460a01c161561072b565b3383526020906005825261050b60ff84862054161561076a565b33845260058252828420805460ff1916600190811790915560025490546001600160a01b038216929190833b156106ed5785519063017d30f760e71b8252838201528681602481875afa80156106e3576106cc575b5090829186933b1561068d5785516360435d7760e01b815233838201528481602481875afa9081156106ae5785916106b8575b50506105a06003546107fa565b80600355865190337f197fc30908874e1934e54d3c15ac16d9bdb26afab8eb3fdde47f777278d18ba38780a2634a988b7f60e01b8252838201528581602481875afa9081156106ae578591610691575b506105f9578380f35b61ffff60a01b191661010160a01b17600255600654823b1561068d5760248492838851958694859363194a60c360e11b85528401525af180156106835761066f575b50507fa645a33a6706739d95d9785acab71f06d2b89c02d601ef8c380e6fe4ee5223b9915160018152a13880828180808380f35b610678906107ae565b61025557823861063b565b84513d84823e3d90fd5b8380fd5b6106a89150863d88116104585761044a81836107d8565b386105f0565b87513d87823e3d90fd5b6106c1906107ae565b61068d578338610593565b6106da9096919392966107ae565b94909138610560565b86513d89823e3d90fd5b8680fd5b5050346100b057816003193601126100b0576020906003549051908152f35b84913461025557826003193601126102555760209250548152f35b1561073257565b60405162461bcd60e51b815260206004820152601060248201526f566f74696e673a206973206f7665722160801b6044820152606490fd5b1561077157565b60405162461bcd60e51b8152602060048201526015602482015274566f74696e673a20616c726561647920766f74652160581b6044820152606490fd5b67ffffffffffffffff81116107c257604052565b634e487b7160e01b600052604160045260246000fd5b90601f8019910116810190811067ffffffffffffffff8211176107c257604052565b60001981146108095760010190565b634e487b7160e01b600052601160045260246000fd5b90816020910312610837575180151581036108375790565b600080fd5b1561084357565b60405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608490fdfea264697066735822122080727f0eb5b953425c0802994a6458851a6b1ed0c3f47296a82182521f4d5c9364736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6,
        "contract": "contracts/votings_factory/votings/UnblockNodeVoting.sol:UnblockNodeVoting",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 9,
        "contract": "contracts/votings_factory/votings/UnblockNodeVoting.sol:UnblockNodeVoting",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 3393,
        "contract": "contracts/votings_factory/votings/UnblockNodeVoting.sol:UnblockNodeVoting",
        "label": "initTimestamp",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 3396,
        "contract": "contracts/votings_factory/votings/UnblockNodeVoting.sol:UnblockNodeVoting",
        "label": "daoContract",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(Dao)1972"
      },
      {
        "astId": 3398,
        "contract": "contracts/votings_factory/votings/UnblockNodeVoting.sol:UnblockNodeVoting",
        "label": "isOver",
        "offset": 20,
        "slot": "2",
        "type": "t_bool"
      },
      {
        "astId": 3400,
        "contract": "contracts/votings_factory/votings/UnblockNodeVoting.sol:UnblockNodeVoting",
        "label": "isAccepted",
        "offset": 21,
        "slot": "2",
        "type": "t_bool"
      },
      {
        "astId": 3402,
        "contract": "contracts/votings_factory/votings/UnblockNodeVoting.sol:UnblockNodeVoting",
        "label": "acceptedAmount",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 3404,
        "contract": "contracts/votings_factory/votings/UnblockNodeVoting.sol:UnblockNodeVoting",
        "label": "rejectedAmount",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 3408,
        "contract": "contracts/votings_factory/votings/UnblockNodeVoting.sol:UnblockNodeVoting",
        "label": "votedUsers",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 3768,
        "contract": "contracts/votings_factory/votings/UnblockNodeVoting.sol:UnblockNodeVoting",
        "label": "nodeHash",
        "offset": 0,
        "slot": "6",
        "type": "t_bytes32"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(Dao)1972": {
        "encoding": "inplace",
        "label": "contract Dao",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}